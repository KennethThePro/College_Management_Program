#!/bin/bash

#Input and Validation of Student ID
function idValidation(){
	echo -n "Student ID              : "; read id
	
	#Auto Capitilise All The 3 Letters When Necessary
	id=${id^^} 
	
	#ID Format 2 Digits |WMR|5 Digits hence ^\d{2}(WMR)\d{5}$ "
	#regexID='^\d{2}WMR\d{5}$' (\d shortcuts does not work)
	#regexID=^[[:digit:]][[:digit:]]WMR[[:digit:]][[:digit:]][[:digit:]][[:digit:]][[:digit:]]$
	regexID=^[0-9]{2}WMR[0-9]{5}$
	
	#check if empty input
	if [ -z "$id" ] 
	then
		echo "Student ID Is Empty. Please Enter Again in 2 Seconds."
		sleep 2
		clear
		./formHeaderFormat "Add New Student Form"
		idValidation
	
	#Check the file first if student ID exist first
	elif grep -qF "$id" student.txt
	then
   		echo "Student ID Already Exist. Please Enter A New Student ID in 2 Seconds."
   		sleep 2
   		clear
		./formHeaderFormat "Add New Student Form"
		idValidation
		
	#Check the format of the Student ID	
	elif ! [[ $id =~ $regexID ]]
	then
		echo "Incorrect Student ID Format. Please Enter Again in 3 Seconds (Format: 11WMR11111)"
		sleep 3
		clear
		./formHeaderFormat "Add New Student Form"
		idValidation
		
	else
		clear
		./formHeaderFormat "Add New Student Form"
		echo "Student ID              : "$id
	fi		
}

function nameValidation(){
	echo -n "Student Name            : "; read name
	
	#Auto Capitalize Each Word of the Name
	name="${name,,}"
	temp=( $name )
	name=${temp[@]^}
	
	#check if input empty
	if [ -z "$name" ] 
	then
		echo "Student Name Is Empty. Please Enter Again in 2 Seconds."
		sleep 2
		clear
		./formHeaderFormat "Add New Student Form"
		echo "Student ID              : "$id
		nameValidation
		
	else
		clear
		./formHeaderFormat "Add New Student Form"
		echo  "Student ID              : "$id
		echo  "Student Name            : "$name
	fi		
}

function birthDateValidation(){
	echo -n "Birth Date (DD-MM-YYYY) : "; read birthDate
	
	#Check DD from 01-31, 01-30, 01-28 (Non Leap Year February), 01-29 (Leap Year February) (Ensure 2 Digits)
	#Check MM from 01-12 (Ensure 2 Digits)
	#Check YYYY (Ensure 4 Digits)
	regexDate='(^(((0[1-9]|1[0-9]|2[0-8])[-](0[1-9]|1[012]))|((29|30|31)[-](0[13578]|1[02]))|((29|30)[-](0[4,6,9]|11)))[-](19|[2-9][0-9])[0-9]{2}$)|(^29[-]02[-](19|[2-9][0-9])(00|04|08|12|16|20|24|28|32|36|40|44|48|52|56|60|64|68|72|76|80|84|88|92|96)$)'
	
	#Check 18 Minimum and Less Than Current Year
	
	defaultIFS=$IFS
	IFS="-" ## internal field separator For Date Format 01-01-2000
	
	
	read -ra infoArr <<< "$birthDate" ## redirect student birth date into array
	IFS=$defaultIFS
	
	birthDay="${infoArr[0]}" ##store day
	birthMonth="${infoArr[1]}" ##store month
	birthYear="${infoArr[2]}" ## store year
	
	#Store Current Date of System
	currentDAY=$(date -d "$D" '+%d')
	currentMONTH=$(date -d "$D" '+%m')
	currentYEAR=$(date -d "$D" '+%Y')
	
	#check if input empty
	if [ -z "$birthDate" ] 
	then
		echo "Birth Date Is Empty. Please Enter Again in 2 Seconds."
		sleep 2
		clear
		./formHeaderFormat "Add New Student Form"
		echo  "Student ID              : "$id
		echo  "Student Name            : "$name
		birthDateValidation	
	
	#Check the format of the Birth Date	
	elif ! [[ $birthDate =~ $regexDate ]]
	then
		echo "Incorrect Birth Date Format or Range. Please Enter Again in 3 Seconds (Format: DD-MM-YYYY)"
		sleep 3
		clear
		./formHeaderFormat "Add New Student Form"
		echo  "Student ID              : "$id
		echo  "Student Name            : "$name
		birthDateValidation
		
		#Check If Birth Date More Than System Date
		#Permutation: 3C3 (All Greater) + 3C2 (2 Pair Greater) + 3C1 (One of them Greater) = 1 + 3 + 3 = 7 Checking Conditions
	elif [ $birthDay -gt $currentDAY -a $birthMonth -eq $currentMONTH -a $birthYear -eq $currentYEAR ] || [ $birthDay -eq $currentDAY -a $birthMonth -gt $currentMONTH -a $birthYear -eq $currentYEAR ] || [ $birthDay -eq $currentDAY -a $birthMonth -eq $currentMONTH -a $birthYear -gt $currentYEAR ] || [ $birthDay -gt $currentDAY -a $birthMonth -gt $currentMONTH -a $birthYear -eq $currentYEAR ] || [ $birthDay -gt $currentDAY -a $birthMonth -eq $currentMONTH -a $birthYear -gt $currentYEAR ] || [ $birthDay -eq $currentDAY -a $birthMonth -gt $currentMONTH -a $birthYear -gt $currentYEAR ] || [ $birthDay -gt $currentDAY -a $birthMonth -gt $currentMONTH -a $birthYear -gt $currentYEAR ]
	then
		echo "Illogical Birth Date As It Is More Than Current Date. Please Enter Again in 2 Seconds."
		sleep 2
		clear
		./formHeaderFormat "Add New Student Form"
		echo  "Student ID              : "$id
		echo  "Student Name            : "$name
		birthDateValidation	
	
	#Check Year To Ensure At Least 18. Can Be Adjusted If Necessary If Some Smart Younger Students Can Enroll into College
	else
	#elif [ $birthYear -le $currentYEAR ]
	#then
		difference="$((currentYEAR-birthYear))"
		if [ $difference -lt 18 ]
		then
			echo "Student Below 18 may not enroll into College yet. Please Enter Again in 2 Seconds."
			sleep 2
			clear
			./formHeaderFormat "Add New Student Form"
			echo  "Student ID              : "$id
			echo  "Student Name            : "$name
			birthDateValidation	
		else
			clear
			./formHeaderFormat "Add New Student Form"
			echo  "Student ID              : "$id
			echo  "Student Name            : "$name
			echo  "Birth Date (DD-MM-YYYY) : ""$birthDate"
		fi
	fi
}

function contactNumberValidation(){
	echo -n "Contact Number          : "; read contactNumber

	#Contact Must Have 3 Numbers in front starting with 01, one dash, then 7 numbers remaining
	regexContact=^01[0-9]-[0-9]{7}$
	
	#check if input empty
	if [ -z "$contactNumber" ] 
	then
		echo "Contact Number Is Empty. Please Enter Again in 2 Seconds."
		sleep 2
		clear
		./formHeaderFormat "Add New Student Form"
		echo  "Student ID              : "$id
		echo  "Student Name            : "$name
		echo  "Birth Date (DD-MM-YYYY) : ""$birthDate"
		contactNumberValidation
	
	#Check the format of the Contact Number
	elif ! [[ $contactNumber =~ $regexContact ]]
	then
		echo "Incorrect Contact Number Format. Please Enter Again in 3 Seconds (Format: 01X-XXXXXXX)"
		sleep 3
		clear
		./formHeaderFormat "Add New Student Form"
		echo  "Student ID              : "$id
		echo  "Student Name            : "$name
		echo  "Birth Date (DD-MM-YYYY) : ""$birthDate"
		contactNumberValidation
		
	else
		clear
		./formHeaderFormat "Add New Student Form"
		echo  "Student ID              : "$id
		echo  "Student Name            : "$name
		echo  "Birth Date (DD-MM-YYYY) : ""$birthDate"
		echo  "Contact Number          : ""$contactNumber"
	fi
}

function mailingAddressValidation(){
	echo -n "Mailing Address         : "; read mailingAddress
	
	#Consist of No. (Digits), Words, Postcode Words, Words
	regexMailingAddress='No\s{1}[0-9]+,\s{1}[A-Za-z \s]+,\s{1}[0-9]{5}\s{1}[A-Za-z \s]+,\s{1}([a-zA-Z]+\s)*[a-zA-Z]+$'
	
	#check if input empty
	if [ -z "$mailingAddress" ] 
	then
		echo "Mailing Address Is Empty. Please Enter Again in 2 Seconds."
		sleep 2
		clear
		./formHeaderFormat "Add New Student Form"
		echo  "Student ID              : "$id
		echo  "Student Name            : "$name
		echo  "Birth Date (DD-MM-YYYY) : ""$birthDate"
		echo  "Contact Number          : ""$contactNumber"
		mailingAddressValidation
		
	else
		clear
		./formHeaderFormat "Add New Student Form"
		echo  "Student ID              : "$id
		echo  "Student Name            : "$name
		echo  "Birth Date (DD-MM-YYYY) : ""$birthDate"
		echo  "Contact Number          : ""$contactNumber"
		echo  "Mailing Address         : "$mailingAddress
	fi
}

function emailAddressValidation(){
	echo -n "Email Address           : "; read emailAddress
	
	#Email Address Only Has Letters In Front and Must end by @tarc.edu.my
	regexEmailAddress=^[A-Za-z]+@tarc.edu.my$
	
	#check if input empty
	if [ -z "$emailAddress" ] 
	then
		echo "Email Address Is Empty. Please Enter Again in 2 Seconds."
		sleep 2
		clear
		./formHeaderFormat "Add New Student Form"
		echo  "Student ID              : "$id
		echo  "Student Name            : "$name
		echo  "Birth Date (DD-MM-YYYY) : ""$birthDate"
		echo  "Contact Number          : ""$contactNumber"
		echo  "Mailing Address         : "$mailingAddress
		emailAddressValidation
		
	#Check the format of the Email Address
	elif ! [[ $emailAddress =~ $regexEmailAddress ]]
	then
		echo "Incorrect Email Format. Please Enter Again in 3 Seconds (Format: abcdef@tarc.edu.my)"
		sleep 3
		clear
		./formHeaderFormat "Add New Student Form"
		echo  "Student ID              : "$id
		echo  "Student Name            : "$name
		echo  "Birth Date (DD-MM-YYYY) : ""$birthDate"
		echo  "Contact Number          : ""$contactNumber"
		echo  "Mailing Address         : "$mailingAddress
		emailAddressValidation
		
	else
		clear
		./formHeaderFormat "Add New Student Form"
		echo  "Student ID              : "$id
		echo  "Student Name            : "$name
		echo  "Birth Date (DD-MM-YYYY) : ""$birthDate"
		echo  "Contact Number          : ""$contactNumber"
		echo  "Mailing Address         : "$mailingAddress
		echo  "Email Address           : "$emailAddress
	fi
}

#Save The Student Record
function savingStudentRecords(){
	echo -ne "\nSaving student records..."
	sleep 2
	echo "$programme:$id:$name:$birthDate:$contactNumber:$mailingAddress:$emailAddress" >> student.txt
}

#For Next Student
function addAnotherStudent(){
	echo -ne "\n\nAdd Another Student? (y)es or (q)uit: "; read choice 
	choice=${choice,,}
	echo 
	case "$choice" in
		y)
			exit
			;;
		q) 
			read -n1 -s -r -p $"Press(q) to return to College Management Menu"  key
			nextStudent=0
			
			#Return only when "q" is pressed
			while [ "$key" != "q" ] 
			do
				read -n1 -s -r -p "" key
				if [ "$key" = "q" ]; then
					break
				fi
			done
			;;
		*)
			echo "Invalid Choice. Please Enter Again in 2 Seconds"
			sleep 2
			clear
			./formHeaderFormat "Add New Student Form"
			echo  "Student ID              : "$id
			echo  "Student Name            : "$name
			echo  "Birth Date (DD-MM-YYYY) : ""$birthDate"
			echo  "Contact Number          : ""$contactNumber"
			echo  "Mailing Address         : "$mailingAddress
			echo  "Email Address           : "$emailAddress
			echo -ne "\nSaving student records..."
			addAnotherStudent
			;;
	esac
}

#Program Starts Here
#Create New File If Does Not Exist
if [ ! -e "student.txt" ] ; then
    touch "student.txt"
fi

nextStudent=1
while [ $nextStudent -eq 1 ]
do
	clear
	./formHeaderFormat "Add New Student Form"
	idValidation
	nameValidation
	birthDateValidation
	contactNumberValidation
	mailingAddressValidation
	emailAddressValidation
	savingStudentRecords
	addAnotherStudent
	
	if [ $nextStudent -eq 0 ]
	then
		exit 1
	fi
done
